
1. 객체(Object): 객관적으로 존재하는 실체
2. 지향(Oriented): 위주, 주되는 것으로 삼는 것
3. 따라서 객체지향(Object Oriented)은 객체위주; 객체(Object)를 가지고 분석하고 설계하고 프로그래밍하는 것
4. 객체지향 키워드: 클래스(Class), 객체(Object), 캡슐화(Encapsulation), 상속성(Inheritance), 다형성(Polymorphism)
  (1) 클래스 vs. 객체: 클래스는 추상(abstract). 객체는 실체(instance)
     추상(abstraction): 구체적인 내용을 생각하지 않고도 사용할 수 있는 기능
     실체(instance): 객체는 추상적인 클래스를 실체화 한 것(instance of class)
     클래스는 오브젝트의 상위개념. 
     * 클래스는 공통특징, 서술 (예. dog)
     * 객체는 고유성, 구체, 실제 존재 (예. 옆집 강아지 뽀삐)
       객체의 모양은 클래스(class)에 서술됨
     > Summary
       클래스: 표현 대상에 대한 description (서술)
       객체: 그러한 클래스를 실체화한 것(instance of class)

  (2) 캡슐화, 상속성, 다형성의 특성을 지원하는 언어가 객체지향 프로그래밍 언어
    1)캡슐화: 데이터와 데이터를 다루는 방법을 묶는 것: 관련있는 것을 묶어서 생각하는 것은 자연스러운 일. 즉 추상화
    2)상속성: 하나의 클래스가 가지고 있는 특징들(=데이터 + 조작) 을 그대로 다른 클래스가 물려 받는 것. (예. poodle is a dog 일 때 poodle은 dog의 데이터와 조작을 물려받는다)
    3)다형성: 상속성의 계층을 따라서 각각의 클래스에 동일한 명령을 줄 수 있는 것
      > Summary
        캡슐화: data + operation on data
        상속성: 상속계층을 따라 data와 operation 공유
        다형성: 다양한 형태에 동일한 명령을 사용 

5. 결국 객체지향이란, 객체와 객체간 역할과 관계 중심

6. 객체지향 분석/설계 방법론: 식별하고 일반화하고(object, class), 대상들 간의 관계(inheritance, embedded)를 설정하고, 상호작용 하도록(behavior)한다.

7. 한마디로? "사람이 세계를 보고 이해하는 방법을 흉내 낸 방법론"
